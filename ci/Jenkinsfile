//@Library('ci_functions@main') _
//python_build('point','pointapp', 3000)
//def call(dockerRepoName, imageName, portNum) {
pipeline {
    agent any

    parameters {
        booleanParam(defaultValue: false, description: 'Deploy the App', name: 'DEPLOY')
    }

    stages {
        stage('Build') {
            steps {
                sh 'pip install -r requirements.txt'
                }
            }
        stage('Test and Coverage') {
            steps {
                script {

                    def files = findFiles(glob: 'test*')
                    for (file in files) {
                        sh "coverage run --omit */site-packages/*,*/dist-packages/* ${file.path}"

                        sh 'coverage report'
                    }


                }

            }
            post {
                always {
                    script {
                        def test_reports_exist = fileExists 'test-reports'
                        if (test_reports_exist) {                        
                            junit 'test-reports/*.xml'
                        }

                        def api_test_reports_exist = fileExists 'api-test-reports'
                        if (api_test_reports_exist) {                        
                            junit 'api-test-reports/*.xml'
                        }
                    }
                }
            }
        }

        stage('Python Lint') {
            steps {

                sh "pylint-fail-under --fail_under 5.0 *.py"


            }
        }

        stage('Package') {
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
            }
            steps {
                withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                    sh "docker login -u 'rdevera8' -p '$TOKEN' docker.io"
                    sh "docker build -t point:latest --tag rdevera8/point:pointapp ."
                    sh "docker push rdevera8/point:pointapp"
                }
            }
        }

        stage('Zip Artifacts') {
            steps {
                script {
                    def app_zip_exist = fileExists 'app.zip'
                    if (app_zip_exist.toBoolean()==false) {
                        zip zipFile: 'app.zip', glob: '*.py'
                    }

                    archiveArtifacts artifacts: 'app.zip'
                }
            }
        }

        stage('Deliver') {
            when {
                expression {
                    params.DEPLOY
                }
            }
            steps {
                sh "docker stop point || true && docker rm point || true"
                sh "docker run -d -p 3000:3000 --name point point:latest"
            }
        }
    }
}
